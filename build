#!/usr/bin/python3 -B
# -*- coding: utf-8 -*-

# This is part of the texworks-release scripts
# Copyright (C) 2013-2014  Stefan LÃ¶ffler
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For links to further information, or to contact the authors,
# see <https://github.com/stloeffler/texworks-release>.

# The -B flag should prevent the generation of .pyc

from __future__ import print_function
from sys import argv
import sys
import os
import re
import subprocess
import urllib
import shutil
import json
import email.utils
import datetime
import textwrap

class colors:
	BOLD = '\033[01m'
	WARN = '\033[33m'
	ERROR = BOLD + '\033[31m'
	OK = BOLD + '\033[32m'
	TASK = BOLD + '\033[35m'
	END = '\033[0m'

try:
	import build_config as config
except ImportError:
	print(colors.ERROR + "Error: Could not load build_config.py" + colors.END)
	print("Creating build_config.py template")
	print(colors.WARN + "Make sure you set the appropriate values!" + colors.END)
	fout = open("build_config.py", "w")
	fout.write("# -*- coding: utf-8 -*-\n\n")
	fout.write('PACKAGER             = "" # Your Name <your.email@domain.com>\n')
	fout.write('MXE_DIR              = "" # /opt/mxe-stable\n')
	fout.write('GOOGLE_CLIENT_ID     = "" # Your Google Drive client ID\n')
	fout.write('GOOGLE_CLIENT_SECRET = "" # Your Google Drive client secret\n')
	fout.write('UPDATE_FIRST         = True # Run `git pull` before starting building?\n')
	fout.write('OVERWRITE            = True # Overwrite build directories if they already exist?\n')
	fout.write('FORCE                = True # Build even if the build target already exists?\n')
	fout.write('UPLOAD               = True # Upload files when the build has finished?\n')
	fout.close()
	sys.exit(1)

BUILDNUM            = 1
TRUNK_SERIES        = "0.5"

PLATFORMS           = ["win32", "ubuntu", "sources"]
#PLATFORMS           = ["ubuntu"]
#PLATFORMS           = ["win32"]
#PLATFORMS           = ["sources"]

# FIXME: Inno Setup
INNOCC              = "C:\\Program Files\\Inno Setup 5\\ISCC.exe"

POPPLERDATAVERSION  = "0.4.7"
POPPLERDATAFILENAME = "poppler-data-%s.tar.gz" % POPPLERDATAVERSION
POPPLERDATAURL      = "http://poppler.freedesktop.org/" + POPPLERDATAFILENAME

UBUNTU_DISTROS      = ["precise", "trusty", "utopic", "vivid"]
#UBUNTU_DISTROS      = ["saucy", "trusty"]
#UBUNTU_DISTROS      = ["utopic"]
GITROOT             = "git-texworks"
MANUALROOT          = "git-manual"
PKGROOT             = "pkg"
BUILDROOT           = "builds"
SCRIPTSROOT         = "src"
LOGROOT             = "logs"

LOG                 = sys.stdout

def getStableVersions():
	global STABLE_VERSIONS
	STABLE_VERSIONS = []
	for d in sorted(subprocess.check_output(["git", "tag"], cwd = GITROOT, universal_newlines = True).split()):
		m = re.match('^release-([0-9.]+)$', d)
		if m:
			STABLE_VERSIONS.append(m.group(1))

def gitClone(upstream, dest):
	subprocess.call(["git", "clone", upstream, dest])

def gitUpdate():
	subprocess.call(["git", "pull"], cwd = GITROOT)
	subprocess.call(["git", "pull"], cwd = MANUALROOT)

def gitExport(src, dest, gitdir):
	p1 = subprocess.Popen(["git", "archive", "--format=tar", src], cwd = gitdir, stdout = subprocess.PIPE)
	p2 = subprocess.Popen(["tar", "-xf", "-"], stdin = p1.stdout, cwd = dest)
	p1.stdout.close()
	p2.communicate()
	return p2.returncode

def getSeries():
	global SERIES
	SERIES = TRUNK_SERIES
	if len(argv) == 2:
		if argv[1] in STABLE_VERSIONS or argv[1] == TRUNK_SERIES: SERIES = argv[1]
		else: print(colors.WARN + "Unknown series '" + argv[1] + "'; building master" + colors.END)

def getSrcTree():
	global SRCTREE
	if SERIES in STABLE_VERSIONS: SRCTREE = "release-" + SERIES
	else: SRCTREE = "master"

def getCommitHash():
	global COMMIT_HASH
	if SERIES in STABLE_VERSIONS:
		tree = "release-" + SERIES
	else:
		tree = "master"
	COMMIT_HASH = subprocess.check_output(['git', 'show', '-s', '--pretty=%h', tree + "^{commit}"], cwd = GITROOT, universal_newlines = True).strip("\n")

def getCommitDate():
	global COMMIT_DATE, COMMIT_DATE_STR
	if SERIES in STABLE_VERSIONS:
		tree = "release-" + SERIES
	else:
		tree = "master"
	date = subprocess.check_output(['git', 'show', '-s', '--pretty=%ci', tree + "^{commit}"], cwd = GITROOT, universal_newlines = True).strip("\n")
	COMMIT_DATE = datetime.datetime.strptime(date.strip(), '%Y-%m-%d %H:%M:%S %z')
	COMMIT_DATE_STR = COMMIT_DATE.astimezone(datetime.timezone.utc).strftime("%Y%m%d")
	
def getPrerequisites():
	if not os.path.isfile(PKGROOT + "/" + POPPLERDATAFILENAME):
		printTask("Downloading '" + POPPLERDATAFILENAME + "'", "")
		urllib.urlretrieve(POPPLERDATAURL, PKGROOT + "/" + POPPLERDATAFILENAME)
		print("OK")

def printTask(description, indent = "   "):
	print (indent + description + "... ", end = '')
	sys.stdout.flush()

def loadJson(filename):
	fin = open(filename)
	retVal = json.load(fin)
	fin.close()
	return retVal

def saveJson(filename, data):
	fout = open(filename, 'w')
	json.dump(data, fout)
	fout.close()

def ensureDirExists(folder):
	if not os.path.exists(folder):
		printTask("Creating " + folder + " folder", "")
		os.mkdir(folder)
		print(colors.OK + "OK" + colors.END)

def ensureDirsExist():
	if not os.path.exists(GITROOT):
		printTask("Cloning TeXworks sources ", "")
		gitClone("https://github.com/TeXworks/texworks.git", GITROOT)
		print(colors.OK + "OK" + colors.END)
	if not os.path.exists(MANUALROOT):
		printTask("Cloning TeXworks manual ", "")
		gitClone("https://github.com/TeXworks/manual.git", MANUALROOT)
		print(colors.OK + "OK" + colors.END)
	ensureDirExists(LOGROOT)
	ensureDirExists(PKGROOT)

def buildWin32():
	SCRIPTSDIR = SCRIPTSROOT + "/" + SERIES + "/win32"
	BUILDDIR = BUILDROOT + "/win32/TeXworks-w32-%s-%s-git_%s" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH)
	MANUALDIR = BUILDDIR + "/manual-export"
	ZIPTARGET = BUILDROOT + "/win32/TeXworks-w32-%s-%s-git_%s.zip" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH)
	INSTALLERTARGET = BUILDROOT + "/win32/TeXworks-setup-%s-%s-git_%s.exe" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH)
	PACKAGES = []
	os.environ["MXE_DIR"] = config.MXE_DIR

	print(colors.TASK + "Win32 build" + colors.END)

	TARGETS = [ZIPTARGET]
	if SERIES != TRUNK_SERIES:
		TARGETS.append(INSTALLERTARGET)

	if not config.FORCE and all(os.path.isfile(f) for f in TARGETS):
		print("   already up to date")
		return

	print("=================== Win32 Build ===================", file = LOG)
	LOG.flush()

	printTask("exporting sources")
	if config.OVERWRITE and os.path.exists(BUILDDIR): shutil.rmtree(BUILDDIR)
	if not os.path.exists(BUILDDIR):
		os.makedirs(BUILDDIR)
		if gitExport(SRCTREE, BUILDDIR, GITROOT) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			print(colors.OK + "OK" + colors.END)
	else:
		print("noop")

	printTask("building")
	if subprocess.call([SCRIPTSDIR + "/build.sh", BUILDDIR], stdout = LOG, stderr = subprocess.STDOUT) != 0:
		print(colors.ERROR + "error" + colors.END)
		return
	else:
		print(colors.OK + "OK" + colors.END)

	if SERIES != TRUNK_SERIES:
		printTask("exporting manual")
		if config.OVERWRITE and os.path.exists(MANUALDIR): shutil.rmtree(MANUALDIR)
		if not os.path.exists(MANUALDIR):
			os.makedirs(MANUALDIR)
			if gitExport("master", MANUALDIR, MANUALROOT) != 0:
				print(colors.ERROR + "error" + colors.END)
				return
			else:
				print(colors.OK + "OK" + colors.END)
		else:
			print("noop")
		printTask("building manual")
		if subprocess.call([SCRIPTSROOT + "/buildManual.sh", MANUALDIR], stdout = LOG, stderr = subprocess.STDOUT) != 0:
			print(colors.ERROR + "error" + colors.END)
		else:
			print(colors.OK + "OK" + colors.END)
			printTask("copying manual")
			if subprocess.call([SCRIPTSROOT + "/copyManual.sh", MANUALDIR, BUILDDIR], stdout = LOG, stderr = subprocess.STDOUT) != 0:
				print(colors.ERROR + "error" + colors.END)
			else:
				print(colors.OK + "OK" + colors.END)


	printTask("packaging (zip)")
	if subprocess.call([SCRIPTSDIR + "/packageZip.sh", BUILDDIR, ZIPTARGET, POPPLERDATAFILENAME], stdout = LOG, stderr = subprocess.STDOUT) != 0:
		print(colors.ERROR + "error" + colors.END)
		return
	else:
		PACKAGES.append(ZIPTARGET)
		print(colors.OK + "OK" + colors.END)

	if SERIES != TRUNK_SERIES:
		printTask("packaging (installer)")
		# unpack everything to BUILDDIR/release
		if subprocess.call([SCRIPTSDIR + "/packageInstaller.sh", BUILDDIR, INSTALLERTARGET, POPPLERDATAFILENAME, INNOCC], stdout = LOG, stderr = subprocess.STDOUT) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			PACKAGES.append(INSTALLERTARGET)
			print(colors.OK + "OK" + colors.END)
	
	if config.UPLOAD:
		printTask("uploading")
		if len(PACKAGES) == 0:
			print("noop")
		elif subprocess.call([SCRIPTSROOT + "/googleDriveUpload.py", "win", "latest" if SERIES == TRUNK_SERIES else "stable"] + PACKAGES, stdout = LOG) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			print(colors.OK + "OK" + colors.END)


def formatChangelog(DISTRO, BUILDDIR):
	changelog = open(BUILDDIR + "/Changelog", 'w')

	# Print Header
	print("texworks (%s~t%s~git~%s~%s%i) %s; urgency=low" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH, DISTRO, BUILDNUM, DISTRO), file = changelog)
	print("", file = changelog)


	if SERIES == TRUNK_SERIES:
		# For trunk releases, derive the changelog from the git log
		try:
			lastRevs = loadJson(BUILDROOT + "/ubuntu/lastRevs.json")
		except IOError:
			lastRevs = []
		if DISTRO in lastRevs: lastRev = lastRevs[DISTRO]
		else: lastRev = None

		if lastRev is None:
			print("    * Initial release", file = changelog)
		else:
			logEntries = subprocess.check_output(['git', 'log', "--pretty=%s", "%s..HEAD" % lastRev], cwd = GITROOT, universal_newlines = True).split("\n")
			for entry in logEntries:
				if len(entry.strip()) == 0:
					continue
				print(textwrap.fill(entry.strip(), 80, initial_indent = "    * ", subsequent_indent = "      "), file = changelog)
#				print("    * %s" % entry.strip(), file = changelog)
	else:
		# For stable releases, derive the changelog from the NEWS file
		news = open(BUILDDIR + '/NEWS')
		pipe = False
		for line in news:
			if line.startswith('Release %s' % SERIES):
				pipe = True
			elif line.startswith('Release'):
				pipe = False
			elif pipe:
				if line.strip() == '': continue
				else: print(line.strip('\n').replace('\t', '    '), file = changelog)
		news.close()

	# Print Footer
	print("", file = changelog)
	print(" -- %s  %s" % (config.PACKAGER, email.utils.formatdate()), file = changelog)

	changelog.close()
	return 0

def buildUbuntu():
	SCRIPTSDIR = SCRIPTSROOT + "/" + SERIES + "/ubuntu"

	print(colors.TASK + "Ubuntu builds" + colors.END)
	try:
		lastRevs = loadJson(BUILDROOT + "/ubuntu/lastRevs.json")
	except IOError:
		lastRevs = []

	if SERIES == TRUNK_SERIES: PPA = "ppa:texworks/ppa"
	else: PPA = "ppa:texworks/stable"
	
	for DISTRO in UBUNTU_DISTROS:
		BUILDDIR = BUILDROOT + "/ubuntu/%s/texworks-%s~t%s~git~%s~%s%i" % (DISTRO, SERIES, COMMIT_DATE_STR, COMMIT_HASH, DISTRO, BUILDNUM)
		DEBTARGET = BUILDROOT + "/ubuntu/%s/texworks_%s~t%s~git~%s~%s%i_source.changes" % (DISTRO, SERIES, COMMIT_DATE_STR, COMMIT_HASH, DISTRO, BUILDNUM)
		print(colors.TASK + "   " + DISTRO + " build" + colors.END)

		if not config.FORCE and os.path.isfile(DEBTARGET):
			print("      already up to date")
			continue

		printTask("   exporting sources")
		if config.OVERWRITE and os.path.exists(BUILDDIR): shutil.rmtree(BUILDDIR)
		if not os.path.exists(BUILDDIR):
			if not os.path.exists(BUILDDIR): os.makedirs(BUILDDIR)
			if gitExport(SRCTREE, BUILDDIR, GITROOT) != 0:
				print(colors.ERROR + "error" + colors.END)
				return
			else:
				print(colors.OK + "OK" + colors.END)
		else:
			print("noop")

		printTask("   formatting changelog")
		if formatChangelog(DISTRO, BUILDDIR) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			print(colors.OK + "OK" + colors.END)

		printTask("   packaging (deb)")

		if subprocess.call([SCRIPTSDIR + "/packageDeb.sh", BUILDDIR, DISTRO, config.PACKAGER], stdout = LOG, stderr = subprocess.STDOUT) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			print(colors.OK + "OK" + colors.END)

		if config.UPLOAD:
			printTask("   uploading (deb)")

			if subprocess.call(["dput", PPA, DEBTARGET], stdout = LOG, stderr = subprocess.STDOUT) != 0:
				print(colors.ERROR + "error" + colors.END)
				return
			else:
				print(colors.OK + "OK" + colors.END)
	
			if SERIES == TRUNK_SERIES:
				lastRevs[DISTRO] = COMMIT_HASH
				saveJson(BUILDROOT + "/ubuntu/lastRevs.json", lastRevs)
		
def buildSources():
	BUILDDIR = BUILDROOT + "/src/texworks-%s-%s-git_%s" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH)
	TARGZTARGET = BUILDROOT + "/src/texworks-%s-%s-git_%s.tar.gz" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH)
	PACKAGES = []
	if SERIES == TRUNK_SERIES:
		return

	print("=================== Sources ===================", file = LOG)
	LOG.flush()

	print(colors.TASK + "Sources" + colors.END)

	printTask("exporting sources")
	if config.OVERWRITE and os.path.exists(BUILDDIR): shutil.rmtree(BUILDDIR)
	if not os.path.exists(BUILDDIR):
		os.makedirs(BUILDDIR)
		if gitExport(SRCTREE, BUILDDIR, GITROOT) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			print(colors.OK + "OK" + colors.END)
	else:
		print("noop")

	printTask("packaging (tar.gz)")
	if subprocess.call(["tar", "--gzip", "--create", "--directory", os.path.dirname(BUILDDIR), "--file", TARGZTARGET, os.path.basename(BUILDDIR)], stdout = LOG, stderr = subprocess.STDOUT) != 0:
		print(colors.ERROR + "error" + colors.END)
		return
	else:
		PACKAGES.append(TARGZTARGET)
		print(colors.OK + "OK" + colors.END)

	if config.UPLOAD:
		printTask("uploading")
		if len(PACKAGES) == 0:
			print("noop")
		elif subprocess.call([SCRIPTSROOT + "/googleDriveUpload.py", "src", "stable"] + PACKAGES, stdout = LOG) != 0:
			print(colors.ERROR + "error" + colors.END)
			return
		else:
			print(colors.OK + "OK" + colors.END)

if __name__ == "__main__":
	ensureDirsExist()
	if config.UPDATE_FIRST: gitUpdate()

	getStableVersions()
	getSeries()
	getSrcTree()
	getCommitHash()
	getCommitDate()
	
	LOG = open(LOGROOT + "/build-%s-%s-%s.log" % (SERIES, COMMIT_DATE_STR, COMMIT_HASH), 'w')

	getPrerequisites()

	print("Building %s %s [%s]" % (SERIES, COMMIT_HASH, COMMIT_DATE_STR))

	# FIXME: Call function dynamically via globals()[function_name]()
	if "ubuntu" in PLATFORMS: buildUbuntu()
	if "sources" in PLATFORMS: buildSources()
	if "win32" in PLATFORMS: buildWin32()
	# FIXME: manual

	LOG.close()
	#os.environ
